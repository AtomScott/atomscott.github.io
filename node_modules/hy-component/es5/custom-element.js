"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CustomElement = CustomElement;
exports.fragmentFromString = fragmentFromString;
Object.defineProperty(exports, "Set", {
  enumerable: true,
  get: function get() {
    return _qdSet.Set;
  }
});
exports.customElementMixin = exports.CUSTOM_ELEMENT_FEATURE_TESTS = void 0;

var _qdSet = require("qd-set");

var _common = require("./common");

var _component = require("./component");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var CUSTOM_ELEMENT_FEATURE_TESTS = new _qdSet.Set([].concat(_toConsumableArray(_component.COMPONENT_FEATURE_TESTS), ["template", "customelements"]));
exports.CUSTOM_ELEMENT_FEATURE_TESTS = CUSTOM_ELEMENT_FEATURE_TESTS;
var circutBreaker = null;

var customElementMixin = function customElementMixin(C) {
  return (
    /*#__PURE__*/
    function (_C) {
      _inherits(_class, _C);

      _createClass(_class, null, [{
        key: "getObservedAttributes",
        value: function getObservedAttributes() {
          var types = this.types;
          return Object.keys(types).map(function (x) {
            return (0, _common.decamelize)(x);
          });
        }
      }]);

      function _class() {
        var _getPrototypeOf2;

        var _this;

        _classCallCheck(this, _class);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(_class)).call.apply(_getPrototypeOf2, [this].concat(args)));

        _this.setupComponent(_assertThisInitialized(_this), _this.getStateFromAttributes());

        return _this;
      }

      _createClass(_class, [{
        key: "reflectAttribute",
        value: function reflectAttribute(key, val) {
          var silent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
          var attrName = (0, _common.decamelize)(key);
          if (silent) circutBreaker = attrName;
          var types = this.constructor.types;
          var type = types[key];

          if (process.env.DEBUG && (!type || !type.stringify)) {
            console.warn("No type provided for key '".concat(key, "'"));
          }

          var attr = type.stringify(val);

          if (attr == null) {
            this.removeAttribute(attrName);
          } else {
            this.setAttribute(attrName, attr);
          }
        }
        /*
        reflectAttributes() {
          const { types } = this.constructor;
          Object.keys(types).forEach(key => this.reflectAttribute(key, this[key], true));
        }
        */

      }, {
        key: "getStateFromAttributes",
        value: function getStateFromAttributes() {
          var _this2 = this;

          var types = this.constructor.types;
          var state = {};
          Object.keys(types).forEach(function (key) {
            var attrName = (0, _common.decamelize)(key);
            var attr = _this2.hasAttribute(attrName) ? _this2.getAttribute(attrName) : null;
            var value = (0, _common.parseType)(types[key], attr);
            if (value != null) state[key] = value;
          });
          return state;
        }
      }, {
        key: "connectedCallback",
        value: function connectedCallback() {
          /* this.reflectAttributes(); */
          this.connectComponent();
        }
      }, {
        key: "disconnectedCallback",
        value: function disconnectedCallback() {
          this.disconnectComponent();
        }
      }, {
        key: "adoptedCallback",
        value: function adoptedCallback() {
          this.adoptComponent();
        }
      }, {
        key: "attributeChangedCallback",
        value: function attributeChangedCallback(attrName, oldAttr, attr) {
          if (circutBreaker === attrName) circutBreaker = null;else if (oldAttr !== attr) {
            var types = this.constructor.types;
            var key = (0, _common.camelCase)(attrName);
            var value = (0, _common.parseType)(types[key], attr);
            this[key] = value != null ? value : this.constructor.defaults[key];
          }
        }
      }, {
        key: "setInternalState",
        value: function setInternalState(key, value) {
          _get(_getPrototypeOf(_class.prototype), "setInternalState", this).call(this, key, value);

          this.reflectAttribute(key, value, true);
        }
      }, {
        key: "setupShadowDOM",
        value: function setupShadowDOM(el) {
          var instance = this.getTemplate();

          if (instance) {
            if ("attachShadow" in Element.prototype) {
              el.attachShadow({
                mode: "open"
              });
              el.shadowRoot.appendChild(instance);
              return el.shadowRoot;
            }

            if (process.env.DEBUG) console.warn("Component doesnt define a template. Intentional?");
            throw Error("ShadowDOM API not supported");
          }

          return el;
        }
      }, {
        key: "getEl",
        value: function getEl() {
          return this;
        }
      }, {
        key: "getTemplate",
        value: function getTemplate() {
          var componentName = this.constructor.componentName;
          return document.querySelector("link[href*=\"".concat(componentName, "\"]")).import.querySelector("#".concat(componentName, "-template")).content.cloneNode(true);
        }
      }, {
        key: "template",
        get: function get() {
          return this.getTemplate();
        }
      }]);

      return _class;
    }(C)
  );
}; // This is a drop-in replacement for `HTMLElement` which is compatible with babel.


exports.customElementMixin = customElementMixin;

function CustomElement() {
  var HTMLElement = typeof window.HTMLElement === "function" ? window.HTMLElement : function () {};
  return Reflect.construct(HTMLElement, [], this.__proto__.constructor); // eslint-disable-line
}

if (Object.setPrototypeOf) {
  Object.setPrototypeOf(CustomElement.prototype, HTMLElement.prototype);
  Object.setPrototypeOf(CustomElement, HTMLElement);
} // TODO


function fragmentFromString(strHTML) {
  return document.createRange().createContextualFragment(strHTML);
}