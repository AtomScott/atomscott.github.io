function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// # src / component.js
// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>
// Licensed under MIT
// import 'core-js/fn/array/for-each';
// import 'core-js/fn/object/assign';
// import 'core-js/fn/object/define-property';
// import 'core-js/fn/object/keys';
import { Set } from "qd-set";
export { Set };
export var COMPONENT_FEATURE_TESTS = new Set(["customevent"]);

var sSymbol = Symbol || function (x) {
  return "_".concat(x);
};

var sRoot = sSymbol("sroot");
var sState = sSymbol("state");
window.process = window.process || {};
window.process.env = window.process.env || {};

window.requestIdleCallback = window.requestIdleCallback || function (f) {
  return window.setTimeout(f, 0);
};

window.cancelIdleCallback = window.cancelIdleCallback || window.clearTimeout;

var Component = function Component() {
  _classCallCheck(this, Component);
};

export var componentMixin = function componentMixin() {
  var C = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Component;
  return (
    /*#__PURE__*/
    function (_C) {
      _inherits(_class, _C);

      function _class() {
        _classCallCheck(this, _class);

        return _possibleConstructorReturn(this, _getPrototypeOf(_class).apply(this, arguments));
      }

      _createClass(_class, [{
        key: "setupComponent",
        value: function setupComponent(el, state) {
          var defaults = this.constructor.defaults;

          if (process.env.DEBUG) {
            var _this$constructor = this.constructor,
                componentName = _this$constructor.componentName,
                sideEffects = _this$constructor.sideEffects;

            if (!componentName) {
              console.warn("Component needs to have a name, e.g. `my-tag`. To set a name, provide a static getter called `componentName`.");
            }

            if (!defaults) {
              console.warn("No default properties provided. Implement a static getter called `defaults`.");
            }

            if (!sideEffects) {
              console.warn("No side effects provided. Implement a static getter called `sideEffects`.");
            }
          }

          this[sState] = Object.assign({}, defaults, state);
          this.setupProperties(this);
          this[sRoot] = this.setupShadowDOM(el);
        }
      }, {
        key: "setupShadowDOM",
        value: function setupShadowDOM(el) {
          return el;
        }
      }, {
        key: "connectComponent",
        value: function connectComponent() {}
      }, {
        key: "disconnectComponent",
        value: function disconnectComponent() {}
      }, {
        key: "adoptComponent",
        value: function adoptComponent() {}
      }, {
        key: "getRoot",
        value: function getRoot() {
          return this[sRoot];
        }
      }, {
        key: "getEl",
        value: function getEl() {
          return this[sRoot];
        }
      }, {
        key: "fireEvent",
        value: function fireEvent(eventName, data) {
          var componentName = this.constructor.componentName;
          var event = new CustomEvent("".concat(componentName, "-").concat(eventName), data);
          this.el.dispatchEvent(event);
        }
      }, {
        key: "setInternalState",
        value: function setInternalState(key, value) {
          this[sState][key] = value;
        }
      }, {
        key: "setupProperties",
        value: function setupProperties() {
          var _this = this;

          var sideEffects = this.constructor.sideEffects;
          Object.keys(this[sState]).forEach(function (key) {
            var sideEffect = sideEffects[key];

            _this.setupProperty(key, sideEffect);
          });
        }
      }, {
        key: "setupProperty",
        value: function setupProperty(key, sideEffect) {
          var _this2 = this;

          Object.defineProperty(this, key, {
            get: function get() {
              return _this2[sState][key];
            },
            set: function set(value) {
              var oldValue = _this2[sState][key];

              _this2.setInternalState(key, value);

              if (sideEffect) sideEffect.call(_this2, value, oldValue);
            },
            enumerable: true,
            configurable: true
          });
        }
      }, {
        key: "sroot",
        get: function get() {
          return this.getRoot();
        }
      }, {
        key: "el",
        get: function get() {
          return this.getEl();
        }
      }]);

      return _class;
    }(C)
  );
};